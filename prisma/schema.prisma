// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// Kalau kalian lia ini banyak komennya maklum aja ya, soalnya ini aku bikin buat belajar sendiri, jadi aku kasih komentar biar aku ngerti apa yang aku tulis

generator client {
      provider = "prisma-client-js" // Generator untuk Prisma Client, ini yang akan dipakai di aplikasi
    }

datasource db {
      provider = "postgresql" // Provider database yang digunakan, di sini kita pakai PostgreSQL
      url      = env("DATABASE_URL") // URL koneksi ke database, diambil dari environment variable DATABASE_URL
    }

/// === User ===
model User {                                          // Model untuk User, yang merepresentasikan user dalam aplikasi, setiap model di Prisma adalah representasi dari tabel di database
  id         Int        @id @default(autoincrement()) // Unique identifier untuk user(auto incerement)
  name       String                                   // Nama lengkap user
  username   String     @unique                       // Username unik user  
  email      String     @unique                       // Email unik user
  dailyLogs  DailyLog[]                               // Relasi ke DailyLog, satu user bisa punya banyak DailyLog
  createdAt  DateTime   @default(now())               // Tanggal pembuatan user
  updatedAt  DateTime   @updatedAt                    // Tanggal update terakhir user
}

/// === Daily Log ===
model DailyLog {
  id          Int         @id @default(autoincrement())                   // Unique identifier untuk DailyLog(auto increment)
  user        User        @relation(fields: [userId], references: [id])   // Relasi ke User, satu DailyLog dimiliki oleh satu User -> buat kolom userId, yang merefer ke id User -> tapi ini cuman deklarasi relasi, bukan buat kolom userId
  userId      Int                                                         // Foreign key for User
  date        DateTime                                                    // Date of the log, should be unique per user
  mood        Mood?       @relation(fields: [moodId], references: [id], onDelete: SetNull)   // Optional relation to Mood
  moodId      Int?                                                        // Nah di sini kita buat kolom moodId yang merefer ke id Mood, ini nullable

  note        String?                                                     // Catatan harian, nullable
  photoUrl    String?                                                     // URL foto harian, nullable
  voiceUrl    String?                                                     // URL rekaman suara harian, nullable

  emotions    EmosiLog[]                                                  // Relasi ke EmosiLog, satu DailyLog bisa punya banyak EmosiLog
  tidurs      TidurLog[]                                                  // Relasi ke TidurLog, satu DailyLog bisa punya banyak TidurLog
  kesehatans  KesehatanLog[]                                              // Relasi ke KesehatanLog, satu DailyLog bisa punya banyak KesehatanLog
  hobis       HobiLog[]                                                   // Relasi ke HobiLog, satu DailyLog bisa punya banyak HobiLog
  makanans    MakananLog[]                                                // Relasi ke MakananLog, satu DailyLog bisa punya banyak MakananLog
  sosials     SosialLog[]                                                 // Relasi ke SosialLog, satu DailyLog bisa punya banyak SosialLog
  betters     AkuYangLebihBaikLog[]                                       // Relasi ke AkuYangLebihBaikLog, satu DailyLog bisa punya banyak AkuYangLebihBaikLog
  prLogs      PekerjaanRumahLog[]                                         // Relasi ke PekerjaanRumahLog, satu DailyLog bisa punya banyak PekerjaanRumahLog
  cuacas      CuacaLog[]                                                  // Relasi ke CuacaLog, satu DailyLog bisa punya banyak CuacaLog
  sekolahs    SekolahLog[]                                                // Relasi ke SekolahLog, satu DailyLog bisa punya banyak SekolahLog
  kecantikan  KecantikanLog[]                                             // Relasi ke KecantikanLog, satu DailyLog bisa punya banyak KecantikanLog
  produktifs  ProduktivitasLog[]                                          // Relasi ke ProduktivitasLog, satu DailyLog bisa punya banyak ProduktivitasLog
  romances    RomanceLog[]                                                // Relasi ke RomanceLog, satu DailyLog bisa punya banyak RomanceLog // Typo in original schema for ProduktivitasLog relation name? Assuming 'produktifs' is correct.
  tempats     TempatLog[]                                                 // Relasi ke TempatLog, satu DailyLog bisa punya banyak TempatLog
  bulan       Bulan?    @relation(fields: [bulanId], references: [id], onDelete: SetNull)    // Optional relation to Bulan
  bulanId     Int?                                                        // Nah di sini kita buat kolom bulanId yang merefer ke id Bulan, ini nullable
  kebiasaanBuruk KebiasaanBurukLog[]                                      // Relasi ke KebiasaanBurukLog, satu DailyLog bisa punya banyak KebiasaanBurukLog
  gejalaHaids GejalaHaidLog[]                                             // Relasi ke GejalaHaidLog, satu DailyLog bisa punya banyak GejalaHaidLog
  pekerjaans  PekerjaanLog[]                                              // Relasi ke PekerjaanLog, satu DailyLog bisa punya banyak PekerjaanLog

  createdAt   DateTime    @default(now())                                 // Tanggal pembuatan DailyLog
  updatedAt   DateTime    @updatedAt                                      // Tanggal update terakhir DailyLog

  @@unique([userId, date]) // mastiin satu user cmn bisa punya satu DailyLog per tanggal
}

/// === Mood (1 per hari) ===
model Mood {
  id     Int        @id @default(autoincrement()) // Unique identifier untuk Mood(auto increment)
  label  String     @unique                       // Label mood, misalnya "Bahagia", "Sedih", dll - should be unique
  color  String                                   // Warna yang merepresentasikan mood, misalnya primay, secondary, dll 
  logs   DailyLog[]                               // Relasi ke DailyLog, satu Mood bisa dimiliki oleh banyak DailyLog
}

/// === Emosi (many per hari) ===
model Emosi {
  id     Int        @id @default(autoincrement()) // Unique identifier untuk Emosi(auto increment)
  label  String     @unique                       // Label emosi, misalnya "Marah", "Senang", dll - should be unique
  logs   EmosiLog[]                               // Relasi ke EmosiLog, satu Emosi bisa dimiliki oleh banyak EmosiLog
}

model EmosiLog {
  id         Int      @id @default(autoincrement())                     // Unique identifier untuk EmosiLog(auto increment)
  dailyLog   DailyLog @relation(fields: [dailyLogId], references: [id], onDelete: Cascade) // Relasi ke DailyLog, satu EmosiLog dimiliki oleh satu DailyLog -> buat kolom dailyLogId, yang merefer ke id DailyLog -> tapi ini cuman deklarasi relasi, bukan buat kolom dailyLogId
  dailyLogId Int                                                        // Nah di sini kita buat kolom dailyLogId yang merefer ke id DailyLog
  emosi      Emosi    @relation(fields: [emosiId], references: [id])    // Relasi ke Emosi, satu EmosiLog dimiliki oleh satu Emosi -> buat kolom emosiId, yang merefer ke id Emosi -> tapi ini cuman deklarasi relasi, bukan buat kolom emosiId
  emosiId    Int                                                        // Nah di sini kita buat kolom emosiId yang

  @@unique([dailyLogId, emosiId]) // Prevents logging the same emotion multiple times for the same daily log
}

// unuk model-model  seterusnya tuh sama lah kayak emosi giu kegunaanya, jad g tak kasih komen lagi

/// === Tidur (many per hari) ===
model Tidur {
  id     Int      @id @default(autoincrement())
  label  String   @unique
  logs   TidurLog[]
}

model TidurLog {
  id         Int      @id @default(autoincrement())
  dailyLog   DailyLog @relation(fields: [dailyLogId], references: [id], onDelete: Cascade)
  dailyLogId Int
  tidur      Tidur    @relation(fields: [tidurId], references: [id])
  tidurId    Int
  @@unique([dailyLogId, tidurId])
}

/// === Kesehatan (many per hari) ===
model Kesehatan {
  id     Int    @id @default(autoincrement())
  label  String @unique
  logs   KesehatanLog[]
  // mastiin labelnya unik
}

model KesehatanLog {
  id           Int        @id @default(autoincrement())
  dailyLog     DailyLog   @relation(fields: [dailyLogId], references: [id], onDelete: Cascade)
  dailyLogId   Int
  kesehatan    Kesehatan  @relation(fields: [kesehatanId], references: [id])
  kesehatanId  Int
  @@unique([dailyLogId, kesehatanId])
}

/// === Hobi (many per hari) ===
model Hobi {
  id    Int    @id @default(autoincrement())
  label String @unique
  logs  HobiLog[]
  // mastiin labelnya unik
}

model HobiLog {
  id        Int      @id @default(autoincrement())
  dailyLog  DailyLog @relation(fields: [dailyLogId], references: [id], onDelete: Cascade)
  dailyLogId Int
  hobi      Hobi     @relation(fields: [hobiId], references: [id])
  hobiId    Int
  @@unique([dailyLogId, hobiId])
}

/// === Makanan (many per hari) ===
model Makanan {
  id    Int    @id @default(autoincrement())
  label String @unique
  logs  MakananLog[]
  // mastiin labelnya unik
}

model MakananLog {
  id         Int      @id @default(autoincrement())
  dailyLog   DailyLog @relation(fields: [dailyLogId], references: [id], onDelete: Cascade)
  dailyLogId Int
  makanan    Makanan  @relation(fields: [makananId], references: [id])
  makananId  Int
  @@unique([dailyLogId, makananId])
}

/// === Sosial (many per hari) ===
model Sosial {
  id    Int    @id @default(autoincrement())
  label String @unique
  logs  SosialLog[]
  // mastiin labelnya unik
}

model SosialLog {
  id         Int      @id @default(autoincrement())
  dailyLog   DailyLog @relation(fields: [dailyLogId], references: [id], onDelete: Cascade)
  dailyLogId Int
  sosial     Sosial   @relation(fields: [sosialId], references: [id])
  sosialId   Int
  @@unique([dailyLogId, sosialId])
}

/// === AkuYangLebihBaik (many per hari) ===
model AkuYangLebihBaik {
  id    Int    @id @default(autoincrement())
  label String @unique
  logs  AkuYangLebihBaikLog[]
  // mastiin labelnya unik
}

model AkuYangLebihBaikLog {
  id         Int      @id @default(autoincrement())
  dailyLog   DailyLog @relation(fields: [dailyLogId], references: [id], onDelete: Cascade)
  dailyLogId Int
  akuYangLebihBaik AkuYangLebihBaik @relation(fields: [akuYangLebihBaikId], references: [id])
  akuYangLebihBaikId Int
  @@unique([dailyLogId, akuYangLebihBaikId])
}

/// === Pekerjaan Rumah (many per hari) ===
model PekerjaanRumah {
  id    Int    @id @default(autoincrement())
  label String @unique
  logs  PekerjaanRumahLog[]
  // mastiin labelnya unik
}

model PekerjaanRumahLog {
  id         Int      @id @default(autoincrement())
  dailyLog   DailyLog @relation(fields: [dailyLogId], references: [id], onDelete: Cascade)
  dailyLogId Int
  pekerjaanRumah PekerjaanRumah @relation(fields: [pekerjaanRumahId], references: [id])
  pekerjaanRumahId Int
  @@unique([dailyLogId, pekerjaanRumahId])
}

/// === Cuaca (many per hari) ===
model Cuaca {
  id    Int    @id @default(autoincrement())
  label String @unique
  logs  CuacaLog[]
  // mastiin labelnya unik
}

model CuacaLog {
  id         Int      @id @default(autoincrement())
  dailyLog   DailyLog @relation(fields: [dailyLogId], references: [id], onDelete: Cascade)
  dailyLogId Int
  cuaca      Cuaca    @relation(fields: [cuacaId], references: [id])
  cuacaId    Int
  @@unique([dailyLogId, cuacaId])
}

/// === Sekolah (many per hari) ===
model Sekolah {
  id    Int    @id @default(autoincrement())
  label String @unique
  logs  SekolahLog[]
  // mastiin labelnya unik
}

model SekolahLog {
  id         Int      @id @default(autoincrement())
  dailyLog   DailyLog @relation(fields: [dailyLogId], references: [id], onDelete: Cascade)
  dailyLogId Int
  sekolah    Sekolah  @relation(fields: [sekolahId], references: [id])
  sekolahId  Int
  @@unique([dailyLogId, sekolahId])
}

/// === Kecantikan (many per hari) ===
model Kecantikan {
  id    Int    @id @default(autoincrement())
  label String @unique
  logs  KecantikanLog[]
  // mastiin labelnya unik
}

model KecantikanLog {
  id         Int      @id @default(autoincrement())
  dailyLog   DailyLog @relation(fields: [dailyLogId], references: [id], onDelete: Cascade)
  dailyLogId Int
  kecantikan Kecantikan @relation(fields: [kecantikanId], references: [id])
  kecantikanId Int
  @@unique([dailyLogId, kecantikanId])
}

/// === Produktivitas (many per hari) === // Corrected typo from Produkivias
model Produktivitas {
  id    Int    @id @default(autoincrement())
  label String @unique
  logs  ProduktivitasLog[]
  // mastiin labelnya unik
}

model ProduktivitasLog {
  id         Int      @id @default(autoincrement())
  dailyLog   DailyLog @relation(fields: [dailyLogId], references: [id], onDelete: Cascade)
  dailyLogId Int
  produktivitas Produktivitas @relation(fields: [produktivitasId], references: [id])
  produktivitasId Int
  @@unique([dailyLogId, produktivitasId])
}

/// === Romance (many per hari) ===
model Romance {
  id    Int    @id @default(autoincrement())
  label String @unique
  logs  RomanceLog[]
  // mastiin labelnya unik
}

model RomanceLog {
  id         Int      @id @default(autoincrement())
  dailyLog   DailyLog @relation(fields: [dailyLogId], references: [id], onDelete: Cascade)
  dailyLogId Int
  romance    Romance  @relation(fields: [romanceId], references: [id])
  romanceId  Int
  @@unique([dailyLogId, romanceId])
}

/// === Tempat (many per hari) ===
model Tempat {
  id    Int    @id @default(autoincrement())
  label String @unique
  logs  TempatLog[]
  // mastiin labelnya unik
}

model TempatLog {
  id         Int      @id @default(autoincrement())
  dailyLog   DailyLog @relation(fields: [dailyLogId], references: [id], onDelete: Cascade)
  dailyLogId Int
  tempat     Tempat   @relation(fields: [tempatId], references: [id])
  tempatId   Int
  @@unique([dailyLogId, tempatId])
}

/// === Kebiasaan Buruk (many per hari) ===
model KebiasaanBuruk {
  id    Int    @id @default(autoincrement())
  label String @unique
  logs  KebiasaanBurukLog[]
  // mastiin labelnya unik
}

model KebiasaanBurukLog {
  id         Int      @id @default(autoincrement())
  dailyLog   DailyLog @relation(fields: [dailyLogId], references: [id], onDelete: Cascade)
  dailyLogId Int
  kebiasaanBuruk KebiasaanBuruk @relation(fields: [kebiasaanBurukId], references: [id])
  kebiasaanBurukId Int
  @@unique([dailyLogId, kebiasaanBurukId])
}

/// === Gejala Haid (many per hari) ===
model GejalaHaid {
  id    Int    @id @default(autoincrement())
  label String @unique
  logs  GejalaHaidLog[]
  // mastiin labelnya unik
}

model GejalaHaidLog {
  id         Int      @id @default(autoincrement())
  dailyLog   DailyLog @relation(fields: [dailyLogId], references: [id], onDelete: Cascade)
  dailyLogId Int
  gejalaHaid GejalaHaid @relation(fields: [gejalaHaidId], references: [id])
  gejalaHaidId Int
  @@unique([dailyLogId, gejalaHaidId])
}

/// === Pekerjaan (many per hari) ===
model Pekerjaan {
  id    Int    @id @default(autoincrement())
  label String @unique
  logs  PekerjaanLog[]
  // mastiin labelnya unik
}

model PekerjaanLog {
  id         Int      @id @default(autoincrement())
  dailyLog   DailyLog @relation(fields: [dailyLogId], references: [id], onDelete: Cascade)
  dailyLogId Int
  pekerjaan  Pekerjaan @relation(fields: [pekerjaanId], references: [id])
  pekerjaanId Int
  @@unique([dailyLogId, pekerjaanId])
}

/// === Bulan (1 per hari) ===
model Bulan {
  id         Int       @id @default(autoincrement())
  label      String    @unique // Assuming month labels like "January" should be unique
  dailyLogs  DailyLog[]
}
